p2 <- ggplot(data = mtcars, aes(x= hp, y =mpg)) + geom_point()
p3 <- ggplot(data = mtcars, aes(x= drat, y =mpg)) + geom_point()
p4 <- ggplot(data = mtcars, aes(x= qsec, y =mpg)) + geom_point()
p5 <- ggplot(data = mtcars, aes(x= vs, y =mpg)) + geom_point()
p6 <- ggplot(data = mtcars, aes(x= gear, y =mpg)) + geom_point()
p7 <- ggplot(data = mtcars, aes(x= carb, y =mpg)) + geom_point()
multiplot(p1, p2, p3, p4, cols=2)
require(grid)
multiplot(p1, p2, p3, p4, cols=2)
require(gridExtra)
grid.arrange(p1,p2, ncol=2)
grid.arrange(p1, p2, p3, p4, p5, p6, p7, cols=3)
grid.arrange(p1, p2, p3, p4, p5, p6, p7, cols=2)
grid.arrange(p1, p2, p3, p4, p5, p6, cols=2)
grid.arrange(p1,p2, ncol=2)
grid.arrange(p1,p2, p3 ncol=2)
grid.arrange(p1,p2, p3, ncol=2)
grid.arrange(p1,p2, p3, p4, ncol=2)
grid.arrange(p1,p2, p3, p4,p5,  ncol=2)
grid.arrange(p1,p2, p3, p4,p5,p6  ncol=2)
grid.arrange(p1,p2, p3, p4,p5,p6,  ncol=2)
grid.arrange(p1,p2, p3, p4,p5,p6,p7,  ncol=2)
grid.arrange(p1,p2, p3, p4,p5,p6,p7,  ncol=2)
grid.arrange(p1,p2, p3, p4,p5,p6,p7,  ncol=3)
data("mtcars")
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill=gear, main="Mileage by Gear Number",
xlab="", ylab="Miles per Gallon")
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill=am, main="Mileage by Gear Number",
xlab="", ylab="Miles per Gallon")
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill=am, main="Mileage by Gear Number",
xlab="", ylab="Miles per Gallon")
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"),
color=am, main="Mileage by Gear Number",
xlab="", ylab="Miles per Gallon")
qplot(gear, factor(mpg), data=mtcars, geom=c("boxplot", "jitter"),
color=am, main="Mileage by Gear Number",
xlab="", ylab="Miles per Gallon")
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"),
color=am, main="Mileage by Gear Number",
xlab="", ylab="Miles per Gallon")
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"),
color=am)
qplot(gear, mpg, data=mtcars, geom=c( "jitter"),
color=am)
p1 <- qplot(disp, mpg, data=mtcars, geom=c( "jitter"),color=am)
grid.arrange(p1,p2, p3, p4, p5, p6, p7, ncol=3)
p1 <- qplot(disp, mpg, data=mtcars, geom=c( "jitter"),color=am)
p2 <- qplot(hp, mpg, data=mtcars, geom=c( "jitter"),color=am)
p3 <- qplot(drat, mpg, data=mtcars, geom=c( "jitter"),color=am)
p4 <- qplot(qsec, mpg, data=mtcars, geom=c( "jitter"),color=am)
p5 <- qplot(vs, mpg, data=mtcars, geom=c( "jitter"),color=am)
p6 <- qplot(gear, mpg, data=mtcars, geom=c( "jitter"),color=am)
p7 <- qplot(carb, mpg, data=mtcars, geom=c( "jitter"),color=am)
grid.arrange(p1,p2, p3, p4, p5, p6, p7, ncol=3)
xlab="", ylab="Miles per Gallon")
?mtcars
grid.arrange(p1,p2, p3, p4, p5, p6, p7, ncol=3)
?mtcars
data("mtcars")
require(ggplot2); library(psych);require(GGally)
require(grid)
carSet <- mtcars[,-c(2,6)]
lm(mpg~am, data = carSet)
lm(mpg~factor(am), data = carSet)
lm(mpg~.,data = carset)
lm(mpg~.,data = carSet)
summary(lm(mpg~factor(am), data = carSet))$coef
summary(lm(mpg~.,data = carSet))$coef
str(carSet)
carSet$am <- factor(carSet$am)
summary(lm(mpg~.,data = carSet))$coef
data("mtcars")
require(ggplot2); library(psych);require(GGally)
require(grid)
carSet <- mtcars[,-c(2,6)]
summary(lm(mpg~factor(am), data = carSet))$coef
summary(lm(mpg~am, data = carSet))$coef
str(carSet$am)
carSet$am <- factor(carSet$am)
str(carSet$am)
summary(lm(mpg~.,data = carSet))$coef
summary(lm(mpg~factor(am), data = carSet))$coef
2e-1
2e-4
2e-3
0.0002
summary(lm(mpg~factor(am)+disp, data = carSet))$coef
summary(lm(mpg~factor(am)*disp, data = carSet))$coef
summary(lm(mpg~., data = carSet))$coef
data("mtcars")
require(ggplot2); library(psych);require(GGally)
require(grid)
carSet <- mtcars[,-c(2,6)]
carSet$am <- factor(carSet$am)
summary(lm(mpg~.,data = carSet))$coef
carSet2 <- relevel(carSet$am, 0)
carSet2 <- relevel(carSet$am, '0')
summary(lm(mpg~.,data = carSet2))$coef
summary(lm(mpg~.,data = carSet))$coef
summary(lm(mpg~cyl, carSet))
summary(lm(mpg~cyl, mtcars))
summary(lm(mpg~cyl, mtcars))$coef
summary(lm(mpg~factor(cyl), mtcars))$coef
summary(lm(mpg~factor(cyl)+wt, mtcars))$coef
cor(mtcars$cyl, mtcars$disp)
cor(mtcars$wt, mtcars$disp)
p1 <- qplot(disp, mpg, data=mtcars, geom=c( "jitter"),color=am);
# p1 <- qplot(disp, mpg, data=mtcars, geom=c( "jitter"),color=am)
p1 <- qplot(disp, mpg, data=mtcars, geom=c( "jitter"),color=am)
p1
p1 <- qplot(disp, mpg, data=mtcars, geom=c( "jitter"),color=am)
p2 <- qplot(hp, mpg, data=mtcars, geom=c( "jitter"),color=am)
p3 <- qplot(drat, mpg, data=mtcars, geom=c( "jitter"),color=am)
p4 <- qplot(qsec, mpg, data=mtcars, geom=c( "jitter"),color=am)
p5 <- qplot(vs, mpg, data=mtcars, geom=c( "jitter"),color=am)
p6 <- qplot(gear, mpg, data=mtcars, geom=c( "jitter"),color=am)
p7 <- qplot(carb, mpg, data=mtcars, geom=c( "jitter"),color=am)
grid.arrange(p1,p2, p3, p4, p5, p6, p7, ncol=2)
require(ggplot2);require(grid)
grid.arrange(p1,p2, p3, p4, p5, p6, p7, ncol=2)
grid.arrange(p1,p2, p3, p4, p5, p6, p7, ncol=3)
require(ggplot2); library(psych);require(GGally)
require(grid)
grid.arrange(p1,p2, p3, p4, p5, p6, p7, ncol=3)
require(ggplot2);require(gridExtra)
?step
carSet <- mtcars[,-c(2,6)]
summar(lm(mpg~am, carSet))
summary(lm(mpg~am, carSet))
summary(lm(mpg~am, carSet))$r
summary(lm(mpg~am, carSet))$Adjusted R-squared
summary(lm(mpg~am, carSet))$r
summary(lm(mpg~am, carSet))$adj.r.squared
```{r best_model, echo=T, cache=T,warning=T}
fit_model <- lm(mpg~., data = carSet)
step_model <- step(fit_model,direction = "both")
summary(step_model)$$r.squared
summary(step_model)$r.squared
summary(step_model$am)
summary(step_model$amManual)
summary(step_model)$coef[,Pr]
summary(step_model)$coef[1]
summary(step_model)$coef[1,1]
summary(step_model)$coef
summary(step_model)$coef[4,4]
str(mtcars$hp)
unique(mtcars$hp)
sort(unique(mtcars$hp))
?mtcars
install.packages("MiKTeX")
install.packages("MiKTeX")
install.packages("LaTex")
installr::installr()
installr::installr()
installr::installr()
installr::installr()
installr::installr()
install.packages("TeX")
installr::install.pandoc()
installr::install.pandoc()
installr::install.MikTeX()
installr::install.MikTeX()
installr::install.pandoc()
installr::install.pandoc()
installr::install.pandoc()
installr::install.pandoc()
installr::install.pandoc()
installr::install.pandoc()
installr::installr()
library(MASS)
data("shuttle")
str(shuttle)
shuttle$use2 <- as.numeric(shuttle$use== "auto")
head(shuttle$use2)
head(shuttle$use2,25)
head(shuttle$use2,125)
glm <- glm(use2~wind,family = binomial, data = shuttle)
summary(glm)
coef(glm)
exp(coef(glm))
exp(coef(glm))[1]/exp(coef(glm))[2]
exp(coef(glm))
1.285/1.03
fit <- glm(use2~wind-1,family = binomial, data = shuttle)
exp(coef(fi))
exp(coef(fit))
exp(coef(fit))[1]/exp(coef(fit))[2]
summary(fit)
fit<-glm(use2 ~ factor(wind) + factor(magn) - 1, family = binomial, data = shuttle)
summary(fit)$coef
fit<-glm(use2 ~ factor(wind) + factor(magn) , family = binomial,
data = shuttle)
summary(fit)$coef
fit<-glm(use2 ~ factor(wind) + factor(magn) - 1, family = binomial,
data = shuttle)
summary(fit)$coef
exp(coef(fit))
(coef(fit))
exp(coef(fit))
exp(coef(fit))[1]
exp(coef(fit))[1]/exp(coef(fit))[2]
data("InsectSprays")
str(inse)
str(InsectSprays)
fit <- glm(spray~., family= poisson, data = InsectSprays)
fit <- glm(factor(spray)~., family= poisson, data = InsectSprays)
fit <- glm(count ~ factor(spray), family= poisson, data = InsectSprays)
summary(fit)
summary(fit)$coef
summary(fit)$coef[1]
summary(fit)$coef[1,1]/
summary(fit)$coef[1,1]/
summary(fit)$coef[1,1]
summary(fit)$coef[1]
summary(fit)$coef
summary(fit)$coef[1]
summary(fit)$coef[5]
summary(fit)$coef[2]
summary(fit)$coef[1]/summary(fit)$coef[1]+summary(fit)$coef[2]
exp(summary(fit)$coef[1]/summary(fit)$coef[1]+summary(fit)$coef[2])
coef(fit)
summary(fit)$coef[1]
summary(fit)$coef
exp(summary(fit)$coef)
fit <- glm(count ~ factor(spray)-1, family= poisson, data = InsectSprays)
exp(summary(fit)$coef)
exp(summary(fit)$coef)[1]
exp(summary(fit)$coef)[2]
exp(summary(fit)$coef)[1]/exp(summary(fit)$coef)[2]
?t.test
############################ QUESTION NO 1  ####################################
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
dTable(airquality, sPaginationType = "full_numbers")
install.packages('rCharts')
install.packages('rCharts')
installr::installr()
library(ggplot2)
library(dplyr)
data("ToothGrowth")
head(ToothGrowth)
doseH <- subset(ToothGrowth, supp == c("VC","OJ") & dose == 0.5)
doseO <- subset(ToothGrowth, supp == c("VC","OJ") & dose == 1)
doseT <- subset(ToothGrowth, supp == c("VC","OJ") & dose == 2)
varH <- aggregate(len ~ supp,data = doseH, FUN = var)
varO <- aggregate(len ~ supp,data = doseO, FUN = var)
varT <- aggregate(len ~ supp,data = doseT, FUN = var)
merge(merge(varH,varO, by.x = 1,by.y = 1),varT,by.x = 1,by.y = 1)
tH <- t.test(doseH$len[doseH$supp=="VC"], doseH$len[doseH$supp=="OJ"],
paired = F, var.equal = F)
th
tH
tO <- t.test(doseO$len[doseO$supp=="VC"], doseO$len[doseO$supp=="OJ"],
paired = F, var.equal = F)
tO
t.test(doseT$len[doseT$supp=="VC"], doseT$len[doseT$supp=="OJ"],
paired = F, var.equal = F)
tH <- t.test(doseH$len[doseH$supp=="VC"], doseH$len[doseH$supp=="OJ"],
paired = F, var.equal = F)
tO <- t.test(doseO$len[doseO$supp=="VC"], doseO$len[doseO$supp=="OJ"],
paired = F, var.equal = F)
tT <- t.test(doseT$len[doseT$supp=="VC"], doseT$len[doseT$supp=="OJ"],
paired = F, var.equal = F)
tH$p.value
tH$statistic
tH$statistic[1]
tH
pt(-1.9609,5.952, lower.tail = F)
pt(-1.9609,5.952, lower.tail = T)
pt(-1.9609,5.952)
library(caret)
setwd("E:/Hamza/Coursera/Developing Data Products/project/code")
v<- read.csv("scientist.csv")
set.seed(1122)
v[1:2,]
a < - v[1:2,]
a <- v[1:2,]
knFit <- train(Name ~day, data = a, method = 'knn', tuneLength =3)
knFit
knn', tuneLength =3,
preProcess= c('centre','scale')
knFit <- train(Name ~day, data = a, method = 'knn', tuneLength =3,
preProcess= c('centre','scale'))
method = 'knn', tuneLength =3,
preProcess= c('cente
,)
)
))
fdasf
knFit <- train(Name ~day, data = a, method = 'knn', tuneLength =3,
preProcess= c('center','scale'))
knFit <- train(Name ~day, data = a, method = 'knn', tuneLength =3,
preProcess= c('center','scale'))
knFit
predict(knFit, newdata = 2)
str(a)
predict(knFit, newdata = 12)
predict(knFit, newdata = c('a',12)
predict(knFit, newdata = c('a',12))
predict(knFit, newdata = c('a',12))
predict(knFit, newdata = c(2))
day <- 2
predict(knFit, newdata = (2))
predict(knFit, newdata = day)
library(caret)
setwd("E:/Hamza/Coursera/Developing Data Products/project/code")
v<- read.csv("scientist.csv")
set.seed(1122)
a <- v[1:2,]
knFit <- train(Name ~day, data = a, method = 'knn', tuneLength =3,
preProcess= c('center','scale'))
day <- 2
predict(knFit, newdata = day)
d <- data.frame(d=12)
predict(knFit, newdata = day)
predict(knFit, newdata = d)
library(caret)
setwd("E:/Hamza/Coursera/Developing Data Products/project/code")
v<- read.csv("scientist.csv")
set.seed(1122)
a <- v[1:2,]
knFit <- train(Name ~day, data = a, method = 'knn', tuneLength =3,
preProcess= c('center','scale'))
d <- data.frame(d=12)
a
d
knFit
d
d <- data.frame(day=12)
d
predict(knFit, newdata = d)
d <- data.frame(day=12, Name = 'a')
predict(knFit, newdata = d)
d
knnFit <- train(Name ~ day, data = v, method = 'knn',tuneLength = 1,
preProcess = c("center"))
fit <- knn3(a$Name, a$day, k=5)
fit <- knn(a$Name, a$day, k=5)
v<- read.csv("scientist.csv", stringsAsFactors = F)
set.seed(1122)
knnFit <- train(Name ~ day, data = v, method = 'knn',tuneLength = 1,
preProcess = c("center"))
a <- v[1:2,]
fit <- knn3(a$Name, a$day, k=5)
str(V)
library(caret)
setwd("E:/Hamza/Coursera/Developing Data Products/project/code")
v<- read.csv("scientist.csv", stringsAsFactors = F)
str(V)
v<- read.csv("scientist.csv", stringsAsFactors = F)
v
min(v)
min(v$day)
max(v$day)
(v$day - min(v$day))/max(v$day) - min(v$day)
(v$day - min(v$day))
max(v$day) - min(v$day)
(v$day - min(v$day))/(max(v$day) - min(v$day))
normVal <- function(val,minVal,maxVal){
(val-minVal)/(maxVal-minVal)
}
normVal(v$day,minVal = (min(v$day)), maxVal = max(max(v$day)))
normMonth <- normVal(v$month,minVal = (min(v$month)), maxVal = max(max(v$month)))
normMonth
normVal(12,minVal = min(v$day), maxVal = max(v$day))
tempMonth <- normVal(month, minVal = min(v$month), maxVal = max(v$month))
month <-8
tempMonth <- normVal(month, minVal = min(v$month), maxVal = max(v$month))
tempMonth
tempDay
tempDay
tempDay <- normVal(day,minVal = min(v$day), maxVal = max(v$day))
tempDay
day <- 12
tempDay <- normVal(day,minVal = min(v$day), maxVal = max(v$day))
tempDay
a <- v
a$normMonth <- normMonth
train(Name~normMonth,data = a, method= 'knn')
a$class <- c(1:nrow(a))
a$class
train(class~normMonth,data = a, method= 'knn')
train(class~a$day,data = a, method= 'knn', preProcess='range')
fit <- train(class~a$day,data = a, method= 'knn', preProcess='range')
predict(fit, data.frame(day=21))
predict(fit,newdata =  data.frame(day=21))
predict(fit,newdata =  data.frame(day=23))
fit <- train(class~a$day,data = a, method= 'knn', tuneLength =3,
preProcess='range')
predict(fit,newdata =  data.frame(day=23))
fit <- train(class~day,data = a, method= 'knn', tuneLength =3,
preProcess='range')
predict(fit,newdata =  data.frame(day=23))
predict(fit,newdata =  data.frame(day=12))
predict(fit,newdata =  data.frame(day=10))
predict(fit,newdata =  data.frame(day=5))
fit <- train(class~day+month,data = a, method= 'knn', tuneLength =3,
preProcess='range')
predict(fit,newdata =  data.frame(day=5, month = 3))
round(predict(fit,newdata = data.frame(day=5, month = 3)))
classVal <- round(predict(fit,newdata = data.frame(day=5, month = 3)))
a$Name[classVal]
a$star[classVal]
a$country[classVal]
v$class <- c(1:nrow(a))
fit <- train(class ~ day + month, data = v, method= 'knn', tuneLength =3,
preProcess='range')
classVal <- round(predict(fit,newdata = data.frame(day=5, month = 3)))
a$Name[classVal]
a$star[classVal]
a$country[classVal]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
require(lubridate)
a <- '2014-08-1'
dmy(a)
ymd(a)
a <- ymd(a)
day(a)
month(a)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
nearestVal <- function(colName, idx){
v$colName[idx]
}
nearestVal(Name,2)
nearestVal(Name,5)
nearestVal <- function(colName, idx){
v$Name[idx]
}
nearestVal(Name,5)
nearestVal(Name,3)
nearestVal(Name,3)
nearestVal <- function(colName, idx){
v$Name[idx]
print(colName)
}
nearestVal(Name,3)
nearestVal <- function(colName, idx){
print(v$Name[idx])
print(colName)
}
nearestVal(Name,3)
nearestVal('Name',3)
nearestVal <- function(colName, idx){
print(v$Name[idx])
print(colName)
print(v$colName[idx])
}
nearestVal('Name',3)
nearestVal <- function(colName, idx){
print(v$Name[idx])
print(colName)
print(v$[1][idx])
}
nearestVal('Name',3)
nearestVal <- function(colName, idx){
print(v$Name[idx])
print(colName)
print(v[1][idx])
}
nearestVal('Name',3)
shiny::runApp()
shiny::runApp()
v$Name[idx]
v$Name[classVal]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
